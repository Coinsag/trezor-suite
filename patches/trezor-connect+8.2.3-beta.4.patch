diff --git a/node_modules/trezor-connect/lib/core/methods/AuthorizeCoinJoin.js b/node_modules/trezor-connect/lib/core/methods/AuthorizeCoinJoin.js
new file mode 100644
index 0000000..1963391
--- /dev/null
+++ b/node_modules/trezor-connect/lib/core/methods/AuthorizeCoinJoin.js
@@ -0,0 +1,72 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+exports.__esModule = true;
+exports["default"] = void 0;
+
+var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
+
+var _AbstractMethod2 = _interopRequireDefault(require("./AbstractMethod"));
+
+var AuthorizeCoinJoin = /*#__PURE__*/function (_AbstractMethod) {
+  (0, _inheritsLoose2["default"])(AuthorizeCoinJoin, _AbstractMethod);
+
+  function AuthorizeCoinJoin(message) {
+    var _this;
+
+    _this = _AbstractMethod.call(this, message) || this;
+    var payload = message.payload; // validateParams(payload, [{ name: 'flags', type: 'number', obligatory: true }]);
+
+    _this.params = {
+      coordinator: payload.coordinator,
+      max_total_fee: payload.max_total_fee,
+      fee_per_anonymity: payload.fee_per_anonymity,
+      address_n: payload.address_n,
+      coin_name: payload.coin_name,
+      script_type: payload.script_type,
+      amount_unit: payload.amount_unit
+    };
+    return _this;
+  }
+
+  var _proto = AuthorizeCoinJoin.prototype;
+
+  _proto.run = /*#__PURE__*/function () {
+    var _run = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
+      var cmd, response;
+      return _regenerator["default"].wrap(function _callee$(_context) {
+        while (1) {
+          switch (_context.prev = _context.next) {
+            case 0:
+              cmd = this.device.getCommands();
+              _context.next = 3;
+              return cmd.typedCall('AuthorizeCoinJoin', 'Success', this.params);
+
+            case 3:
+              response = _context.sent;
+              return _context.abrupt("return", response.message);
+
+            case 5:
+            case "end":
+              return _context.stop();
+          }
+        }
+      }, _callee, this);
+    }));
+
+    function run() {
+      return _run.apply(this, arguments);
+    }
+
+    return run;
+  }();
+
+  return AuthorizeCoinJoin;
+}(_AbstractMethod2["default"]);
+
+exports["default"] = AuthorizeCoinJoin;
\ No newline at end of file
diff --git a/node_modules/trezor-connect/lib/core/methods/GetOwnershipId.js b/node_modules/trezor-connect/lib/core/methods/GetOwnershipId.js
new file mode 100644
index 0000000..b4d0d14
--- /dev/null
+++ b/node_modules/trezor-connect/lib/core/methods/GetOwnershipId.js
@@ -0,0 +1,69 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+exports.__esModule = true;
+exports["default"] = void 0;
+
+var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
+
+var _AbstractMethod2 = _interopRequireDefault(require("./AbstractMethod"));
+
+var GetOwnershipId = /*#__PURE__*/function (_AbstractMethod) {
+  (0, _inheritsLoose2["default"])(GetOwnershipId, _AbstractMethod);
+
+  function GetOwnershipId(message) {
+    var _this;
+
+    _this = _AbstractMethod.call(this, message) || this;
+    var payload = message.payload; // validateParams(payload, [{ name: 'flags', type: 'number', obligatory: true }]);
+
+    _this.params = {
+      address_n: payload.address_n,
+      coin_name: payload.coin_name,
+      // multisig?: MultisigRedeemScriptType,
+      script_type: payload.script_type
+    };
+    return _this;
+  }
+
+  var _proto = GetOwnershipId.prototype;
+
+  _proto.run = /*#__PURE__*/function () {
+    var _run = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
+      var cmd, response;
+      return _regenerator["default"].wrap(function _callee$(_context) {
+        while (1) {
+          switch (_context.prev = _context.next) {
+            case 0:
+              cmd = this.device.getCommands();
+              _context.next = 3;
+              return cmd.typedCall('GetOwnershipId', 'OwnershipId', this.params);
+
+            case 3:
+              response = _context.sent;
+              return _context.abrupt("return", response.message);
+
+            case 5:
+            case "end":
+              return _context.stop();
+          }
+        }
+      }, _callee, this);
+    }));
+
+    function run() {
+      return _run.apply(this, arguments);
+    }
+
+    return run;
+  }();
+
+  return GetOwnershipId;
+}(_AbstractMethod2["default"]);
+
+exports["default"] = GetOwnershipId;
\ No newline at end of file
diff --git a/node_modules/trezor-connect/lib/core/methods/GetOwnershipProof.js b/node_modules/trezor-connect/lib/core/methods/GetOwnershipProof.js
new file mode 100644
index 0000000..f891589
--- /dev/null
+++ b/node_modules/trezor-connect/lib/core/methods/GetOwnershipProof.js
@@ -0,0 +1,72 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
+
+exports.__esModule = true;
+exports["default"] = void 0;
+
+var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
+
+var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
+
+var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));
+
+var _AbstractMethod2 = _interopRequireDefault(require("./AbstractMethod"));
+
+var GetOwnershipProof = /*#__PURE__*/function (_AbstractMethod) {
+  (0, _inheritsLoose2["default"])(GetOwnershipProof, _AbstractMethod);
+
+  function GetOwnershipProof(message) {
+    var _this;
+
+    _this = _AbstractMethod.call(this, message) || this;
+    var payload = message.payload; // validateParams(payload, [{ name: 'flags', type: 'number', obligatory: true }]);
+
+    _this.params = {
+      address_n: payload.address_n,
+      coin_name: payload.coin_name,
+      script_type: payload.script_type,
+      // multisig?: MultisigRedeemScriptType,
+      user_confirmation: payload.user_confirmation,
+      ownership_ids: payload.user_confirmation,
+      commitment_data: payload.commitment_data
+    };
+    return _this;
+  }
+
+  var _proto = GetOwnershipProof.prototype;
+
+  _proto.run = /*#__PURE__*/function () {
+    var _run = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
+      var cmd, response;
+      return _regenerator["default"].wrap(function _callee$(_context) {
+        while (1) {
+          switch (_context.prev = _context.next) {
+            case 0:
+              cmd = this.device.getCommands();
+              _context.next = 3;
+              return cmd.typedCall('GetOwnershipProof', 'OwnershipProof', this.params);
+
+            case 3:
+              response = _context.sent;
+              return _context.abrupt("return", response.message);
+
+            case 5:
+            case "end":
+              return _context.stop();
+          }
+        }
+      }, _callee, this);
+    }));
+
+    function run() {
+      return _run.apply(this, arguments);
+    }
+
+    return run;
+  }();
+
+  return GetOwnershipProof;
+}(_AbstractMethod2["default"]);
+
+exports["default"] = GetOwnershipProof;
\ No newline at end of file
diff --git a/node_modules/trezor-connect/lib/core/methods/index.js b/node_modules/trezor-connect/lib/core/methods/index.js
index 7830097..110b211 100644
--- a/node_modules/trezor-connect/lib/core/methods/index.js
+++ b/node_modules/trezor-connect/lib/core/methods/index.js
@@ -9,6 +9,8 @@ var _constants = require("../../constants");
 
 var _AbstractMethod = _interopRequireDefault(require("./AbstractMethod"));
 
+var _AuthorizeCoinJoin = _interopRequireDefault(require("./AuthorizeCoinJoin"));
+
 var _BlockchainDisconnect = _interopRequireDefault(require("./blockchain/BlockchainDisconnect"));
 
 var _BlockchainEstimateFee = _interopRequireDefault(require("./blockchain/BlockchainEstimateFee"));
@@ -67,6 +69,10 @@ var _GetDeviceState = _interopRequireDefault(require("./GetDeviceState"));
 
 var _GetFeatures = _interopRequireDefault(require("./GetFeatures"));
 
+var _GetOwnershipId = _interopRequireDefault(require("./GetOwnershipId"));
+
+var _GetOwnershipProof = _interopRequireDefault(require("./GetOwnershipProof"));
+
 var _GetPublicKey = _interopRequireDefault(require("./GetPublicKey"));
 
 var _GetSettings = _interopRequireDefault(require("./GetSettings"));
@@ -134,6 +140,7 @@ var _GetCoinInfo = _interopRequireDefault(require("./GetCoinInfo"));
 var _RebootToBootloader = _interopRequireDefault(require("./RebootToBootloader"));
 
 var METHODS = {
+  authorizeCoinJoin: _AuthorizeCoinJoin["default"],
   blockchainDisconnect: _BlockchainDisconnect["default"],
   blockchainEstimateFee: _BlockchainEstimateFee["default"],
   blockchainGetAccountBalanceHistory: _BlockchainGetAccountBalanceHistory["default"],
@@ -163,6 +170,8 @@ var METHODS = {
   getAddress: _GetAddress["default"],
   getDeviceState: _GetDeviceState["default"],
   getFeatures: _GetFeatures["default"],
+  getOwnershipId: _GetOwnershipId["default"],
+  getOwnershipProof: _GetOwnershipProof["default"],
   getPublicKey: _GetPublicKey["default"],
   getSettings: _GetSettings["default"],
   liskDeprecated: _LiskDeprecated["default"],
diff --git a/node_modules/trezor-connect/lib/index.js b/node_modules/trezor-connect/lib/index.js
index a12dd2b..fd6bc4b 100644
--- a/node_modules/trezor-connect/lib/index.js
+++ b/node_modules/trezor-connect/lib/index.js
@@ -47,6 +47,11 @@ var TrezorConnect = {
   },
   uiResponse: _node.uiResponse,
   // methods
+  authorizeCoinJoin: function authorizeCoinJoin(params) {
+    return (0, _node.call)(_objectSpread({
+      method: 'authorizeCoinJoin'
+    }, params));
+  },
   blockchainGetAccountBalanceHistory: function blockchainGetAccountBalanceHistory(params) {
     return (0, _node.call)(_objectSpread({
       method: 'blockchainGetAccountBalanceHistory'
@@ -202,6 +207,16 @@ var TrezorConnect = {
       method: 'getFeatures'
     }, params));
   },
+  getOwnershipId: function getOwnershipId(params) {
+    return (0, _node.call)(_objectSpread({
+      method: 'getOwnershipId'
+    }, params));
+  },
+  getOwnershipProof: function getOwnershipProof(params) {
+    return (0, _node.call)(_objectSpread({
+      method: 'getOwnershipProof'
+    }, params));
+  },
   getPublicKey: function getPublicKey(params) {
     return (0, _node.call)(_objectSpread({
       method: 'getPublicKey'
